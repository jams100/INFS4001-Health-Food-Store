package com.example.softwarePatterns;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;

import java.util.ArrayList;

import com.example.softwarePatterns.items.StockItemRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody; 

@Controller
public class MainController {
	@Autowired // This gets the bean called userRepository
	// Which is auto-generated by Spring, we will use to handle the data
	private UserRepo userRepository;
	@Autowired 
	private UserService userservice;

	@GetMapping(value="/index")
	public String home() {
		return "index";
	}

	@RequestMapping(value="/login", method = RequestMethod.POST)
	public String verifyLogin(@RequestParam String name, @RequestParam String password, HttpServletRequest request, Model model) {
		User user = userservice.login(name, password);

		if(user == null) {
			model.addAttribute("loginError", "Error logging in, please try again");
			return "login";	
		}

		int id;
		User loggedInUser = user;
		id = loggedInUser.getId();
		model.addAttribute(name, user.getName());
		System.out.print(loggedInUser.getId());

		request.getSession().setAttribute("user", loggedInUser);
		session = request.getSession(true);
		session.setAttribute("loggedInUser", user);

		return "success";
	}
	ArrayList<StockItem>items = new ArrayList<>();

	@RequestMapping(value = "/login", method=RequestMethod.GET)
	public String showLogin() {
		return "login";
	}

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setEmail(email);
		n.setName(name);
		userRepository.save(n);

		StockItem item = new StockItem();
		item.setTitle("First item");
		
		return "Saved";
	}
	private HttpSession session;

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

    @RequestMapping(value="/register", method = RequestMethod.POST)
	public String registration(@RequestParam String name, @RequestParam String password,@RequestParam String email, @RequestParam String address, @RequestParam String town, @RequestParam String county, 
			@RequestParam String number, @RequestParam String payment, @RequestParam String fname, @RequestParam String lname, @RequestParam int date, @RequestParam int year) {
		User user = userservice.register(name, password, email,address);
		int type = Integer.parseInt(payment);
		Card card = new Card(fname, lname, address, town, county, number, type, date, year);
		if(user == null) {
			
			return "login";
		}
		else {
		
		userservice.updateUser(user.getId(), user);
		return "success";
		}

	}
	@RequestMapping(value= "/addItem", method = RequestMethod.POST)
	public String addItem(HttpServletRequest request, Model model) {

		//StockItem item = new StockItem();
		//item.setTitle("First item");
		//itemRepo.save(item);
		StockItem item = new StockItem();
		item.setCategory("tablets");
		item.setTitle("paracetamol");
		StockItem item2 = new StockItem();
		item2.setCategory("tablets");
		item2.setTitle("nurofen");
		items.add(item);
		items.add(item2);

		model.addAttribute("lists",this.items);
		User u = (User) request.getSession().getAttribute("user");
		User u2 = (User) session.getAttribute("user");
		System.out.println("u2 " + u2.getEmail());
		System.out.println(u.getEmail());

		Cart cart = new Cart();
		cart.getItems().add(item);
		cart.getItems().add(item2);
		u.setCart(cart);

		Order order = new Order();
		order.setCart(cart);
		u.getOrders().add(order);
		userRepository.save(u);
		System.out.print(u.getOrders().toString());
		return "itemHome";

	}
	@RequestMapping(value = "/success")
	public String redirect(Model model) {
		return "itemhome";
	}
}